[ 개발환경 구축 ]
1. 자바 언어로 개발 할 수 있는 플랫폼
	1) Java SE (모든 플랫폼에 공통적으로 사용됨)
		- 독립 실행형 응용프로그램
	2) Java EE
		- 웹 어플리케이션 ( 대형, 기업용 어플리케이션 )
	3) Java ME
		- 임베디드 어플리케이션 (기계, 장치 용 어플리케이션)
		   스마트폰 개발도 가능하지만, android가 대세
2. classpath
	자바는 플랫폼에 중립적이기에,  클래스파일의 경로는 classpath라는 시스템 변수를 이용
3. Write Once Run Anywhere
	- JVM (자바 가상 머신)
[ 자바 기본 문법 ]
1. 기본 자료형
	문자 (char) : 음수 포함X, 문자 코드를 담아야 하기 때문에  사실은 숫자이다.
	숫자 : 실수 - float(4), double(8)
		정수 - byte(1) short(2) int(4) long(8)
	논리값 : boolean
2. 자료형간 형변환
	(1) 문자, 숫자간 가능함 즉, boolean형은 제외
		- promotion : 작은 자료형 ---> 큰 자료형
		- demotion : 큰 자료형 ----> 작은 자료형
	(2)  (소괄호 자체가 cast연산자) : 손실을 감안해서라도 , 원하는 자료형으로 강제로 형 변환
	(3) int형을 연산시 기본 자료형으로 지정 ( 가장 최적의 성능이기 때문)
[ 클 래 스 ]
	1) JVM이 메모리의 구조
		static : 클래스의 원본코드
		stack : 모든 지역변수 ( 메서드의 지역 변수 )
		heap : 인스턴스, constant pool 등드어
	2) 용어
		인스턴스 : 클래스로 부터 메모리 힙 영역에 생성된 객체를 가르키는 말
		클래스변수, 메서드 : static 수정자가 붙은 변수와 메서드, 인스턴스에 소속되지 않고 클래스 원본에 소속되므로 접근시 
					클래스명.변수   ,    클래스명.메서드   형식으로 접근이 가능하다.
		가비지 컬렉션 : 개발자가 생성해 놓은 힙 영역의 인스턴스는 JVM의 인스턴스 청소담당자에 의해 소멸되며,
				   개발자가 직접 소멸시키지 못한다. 즉 메모리 관리를 안정적으로 처리하기 위해 시스템이 담당한다.
	3) 인스턴스 초기화 블럭, static 초기화 블럭
	4) 메서드 
		(1) getter / setter : 은닉화 와 관련됨. encapsulation
		- 은닉화란 ? 클래스 작성시 변수는 보호하고, 이 변수에 대한 접근을 개발자가 제공해주는 메서드를 통해 제어할 수 있는 클래스 정의 기법
		관례  : get 단어, set 단어 : 단어의 첫 철자는 대문자
		(2) 오버로딩 ( overloading ) : 하나의 클래스내 메서드명을 동일하게 정의할 수 있는 기법
						      약간 다르다 (메서드의 매개변수 개수, 자료형)
		  왜 사용? 직관성을 힘들게 부여해서 기껏 만들어놓았는데, 로직이 크게 틀리지 않음에도, 중복허용을 허용하지 않으면
		  	     또 새로운 메서드명을 만들어야 한다.
		(3) 생성자 ( 생성자도 method이다. 따라서 오버로딩도 지원한다. )
			단, 생성장에 변환형을 둘 경우 일반메서드화 되어 인스턴스 생성 능력이 없어진다.
		  - 개발자가,  생성자를 정의하지 않으면, 컴파일러에 의해 기본 생성자가 제공되는데, 이러한 생서자를 가르켜 디폴트생성자라한다.
		     디폴트 생서자에는 눈에 보이지 않지만 super() 가 생략되어 있다.
	5) 상속
		(1) 사용목적 - 클래스의 재사용
				- 비슷한 자료형을 정의할 수 있다. ( 상속관계의 자료형간에는 같은 자료형이 된다.)
				- 구현시 extends 키워드 사용 ( =is a )
		(2) 부모의 메서드가 현재 개발시점에는 현 상황에 적절하지 않을 경우 부모메서드를	업그레이드 할 수 있는데, 이때 
		      부모의 메서드를 재정의하는 메서드 정의기법을 오바리이딩 이라한다. (완전동일해야한다.)
		(3) 다형성(polymorphism) : 특정 자료형이 어느때는 부모역할, 자식역할
			ex) Bird b = new Duck();   //오리가 fly() 메서드를 오버라이드한 경우
			      b.fly(); //오리 메서드를 호출

	6) 패키지와 import
		(1) package 사용목적 - 클래스명 중복 방지, 관련성 있는 클래스들 끼리 묶기 위함.
		(2) import - 현재 클래스와는 다른 경로에 있는 클래스의 위치를 명시하기 위함.
		(3) package, import는 루트 경로를 개발자가 등록한 classpath로 기준으로 한다.
	7) 자바의 보안 처리
		public < protected < default < privated
	8) 남이 만든 클래스르 제곻받는 경우, 원본이 없기 때문에 우리가 해당클래스의 변수 메서드를 사용하려면 어떻게 해야할까? (남이 만든 클래스 사용법)
	    API document 를 제공받아야한다. javadoc.exe
